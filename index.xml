<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math2001&#39;s blog</title>
    <link>https://math2001.github.io/</link>
    <description>Recent content on Math2001&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Mathieu Paturel 2017-2019</copyright>
    <lastBuildDate>Fri, 15 Feb 2019 11:12:47 +1100</lastBuildDate>
    
	<atom:link href="https://math2001.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Motion and calculus</title>
      <link>https://math2001.github.io/post/motion-and-calculus/</link>
      <pubDate>Fri, 15 Feb 2019 11:12:47 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/motion-and-calculus/</guid>
      <description>&lt;p&gt;If you studied physics, one of the first things you probably did was graph the
&amp;ldquo;motion&amp;rdquo; of objects. That is the displacement, velocity, and acceleration at
an instant &lt;em&gt;t&lt;/em&gt;. Didn&amp;rsquo;t it remind you of a mathematical concept? &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Length of a curve</title>
      <link>https://math2001.github.io/post/length-of-a-curve/</link>
      <pubDate>Thu, 14 Feb 2019 21:31:45 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/length-of-a-curve/</guid>
      <description>&lt;p&gt;After misunderstanding a question in physics, I thought I had to calculate the
length of a curved trajectory (ie. the distance) instead of just the straight
line (ie. the displacement). Turns out it was the easy option, but I now wanted
to know how to get the length of a curve. I mean, it&amp;rsquo;d just be summing up
an infinite number of straight lines, which is almost exactly what integration
is&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tmux Zoom</title>
      <link>https://math2001.github.io/post/tmux-zoom/</link>
      <pubDate>Tue, 02 Oct 2018 08:41:38 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/tmux-zoom/</guid>
      <description>When you have multiple panes open in tmux, just press prefix z to toggle zoom mode. When activated, only the current pane will be shown. ðŸ˜‰</description>
    </item>
    
    <item>
      <title>Vim file type specific settings</title>
      <link>https://math2001.github.io/post/vim-filetype-specific-settings/</link>
      <pubDate>Fri, 28 Sep 2018 15:25:33 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-filetype-specific-settings/</guid>
      <description>&lt;p&gt;If you want to run some vim script for a specific file type, don&amp;rsquo;t make an
auto command, they get messy really quickly. Instead, you should use &lt;code&gt;ftplugin&lt;/code&gt;. &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Jump to function definition in vim</title>
      <link>https://math2001.github.io/post/vim-jump-to-function-definition/</link>
      <pubDate>Fri, 28 Sep 2018 11:47:21 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-jump-to-function-definition/</guid>
      <description>&lt;p&gt;One of the features I miss from Sublime Text is the Goto Anything. In vim, by
default, you have &lt;code&gt;:e **/bit&lt;/code&gt; and then tab, and it gets annoying pretty
quickly. Thankfully, there&amp;rsquo;s &lt;a href=&#34;https://github.com/junegunn/fzf&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; (with &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fzf.vim&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Challenge #1: Translate back</title>
      <link>https://math2001.github.io/post/challenge-1-translate-back/</link>
      <pubDate>Fri, 25 May 2018 22:32:29 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/challenge-1-translate-back/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve got a little challenge for you.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>So vim got slow</title>
      <link>https://math2001.github.io/post/so-vim-became-slow/</link>
      <pubDate>Mon, 21 May 2018 17:59:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/so-vim-became-slow/</guid>
      <description>&lt;p&gt;You know that feeling? You press in a key, and you have to wait like 0.5 seconds
to see it appear on screen. You try to run &lt;code&gt;vim --clean&lt;/code&gt; and everything&amp;rsquo;s back
to &amp;ldquo;normal&amp;rdquo;. How do you find &lt;em&gt;quickly&lt;/em&gt; the cause of this horrible disaster ðŸ˜„ &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Last Terminal Title</title>
      <link>https://math2001.github.io/post/the-last-terminal-title/</link>
      <pubDate>Sun, 04 Feb 2018 15:07:11 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/the-last-terminal-title/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://math2001.github.io/img/tmux-title.png&#34; alt=&#34;ls@asyncio   vim@math2001.github.io   git@dotfiles&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I use tmux, and in the tabs title, it displays the terminal&amp;rsquo;s title, which is
just done by this 2 lines in your &lt;code&gt;.tmux.conf&lt;/code&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>0.9 Repeater</title>
      <link>https://math2001.github.io/post/0.9-repeater/</link>
      <pubDate>Fri, 02 Feb 2018 17:41:26 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/0.9-repeater/</guid>
      <description>&lt;p&gt;Today I learned something a bit weird in mathematics, which I find quiet funny
and interesting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>So binary numbers are useful?</title>
      <link>https://math2001.github.io/post/so-binary-numbers-are-useful/</link>
      <pubDate>Fri, 13 Oct 2017 16:14:21 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/so-binary-numbers-are-useful/</guid>
      <description>&lt;p&gt;Do you know what binary numbers are? They&amp;rsquo;re just a way of counting with just 2
numbers: 0 and 1. For example, &lt;code&gt;9&lt;/code&gt; is in binary &lt;code&gt;1001&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is the format your computer uses to do everything, at a very low level.
Either there is some current, or there isn&amp;rsquo;t. And then, it interprets these
numbers, and becomes what it is.&lt;/p&gt;

&lt;p&gt;So, what the heck could be the use of binary numbers to us, simple programmers
who write some code with all these different symbols, letters, and numbers?
ðŸ¤”&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to combine svgs</title>
      <link>https://math2001.github.io/post/combine-svgs/</link>
      <pubDate>Sun, 08 Oct 2017 17:18:21 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/combine-svgs/</guid>
      <description>&lt;p&gt;If you want your website to be fast, you should limit the number of http
requests. A great way of doing that is combining your images. If you use SVGS
for your icons and stuff like that, here&amp;rsquo;s how you can combine all your icon in
one big file, and use them in your website!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim Line Completion</title>
      <link>https://math2001.github.io/post/vim-line-completion/</link>
      <pubDate>Wed, 27 Sep 2017 12:55:56 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-line-completion/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://math2001.github.io/img/vim-ctrl-x_ctrl-l.gif&#34; alt=&#34;demo of ctrl-x_ctrl+l in insert mode in vim&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Do you know what kind of completion this is? &lt;strong&gt;Line&lt;/strong&gt; completion. It looks for
every lines that starts with the same text (it doesn&amp;rsquo;t take into consideration
the indication), and completes it for you! Awesome right? &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Itp: insert template please</title>
      <link>https://math2001.github.io/project/itp-insert-template-please/</link>
      <pubDate>Wed, 27 Sep 2017 11:18:56 +1000</pubDate>
      
      <guid>https://math2001.github.io/project/itp-insert-template-please/</guid>
      <description>&lt;p&gt;I was getting pretty sick of typing the same &lt;code&gt;.gitignore&lt;/code&gt;, copy/pasting my
license, README and everything. &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash&#39;s fc command</title>
      <link>https://math2001.github.io/post/bashs-fc-command/</link>
      <pubDate>Tue, 26 Sep 2017 18:03:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/bashs-fc-command/</guid>
      <description>&lt;p&gt;When editing long commands in your terminal (you know, the one that wraps
ðŸ˜‰), sometimes you&amp;rsquo;d be better of using your actual editor (like vim or
Sublime). And guess what? Bash let&amp;rsquo;s you do that! ðŸŽ‰&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash&#39;s find command</title>
      <link>https://math2001.github.io/post/bashs-find-command/</link>
      <pubDate>Sun, 24 Sep 2017 07:51:15 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/bashs-find-command/</guid>
      <description>&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; command in bash is quite powerful, and knowing the basics might save
you some scripting.&lt;/p&gt;

&lt;p&gt;What does it do? It &amp;ldquo;finds&amp;rdquo; files. By default, it outputs their path relative to
where you ran &lt;code&gt;find&lt;/code&gt;. But, in addition of providing you with advanced &amp;ldquo;filters&amp;rdquo;
it actually allows you to run commands on each of those files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying a hugo site on GitHub pages</title>
      <link>https://math2001.github.io/post/hugo-deploying-github-pages/</link>
      <pubDate>Sat, 23 Sep 2017 11:23:45 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/hugo-deploying-github-pages/</guid>
      <description>&lt;p&gt;When you want to deploy a static website built with the fantastic &lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; on
GitHub pages, you don&amp;rsquo;t have 100 of possibilities. A clean one, and an easy one
ðŸ˜„.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Live Svg</title>
      <link>https://math2001.github.io/project/live-svg/</link>
      <pubDate>Fri, 22 Sep 2017 18:31:15 +1000</pubDate>
      
      <guid>https://math2001.github.io/project/live-svg/</guid>
      <description>&lt;p&gt;SVGs are awesome. They allow you to make some infinitely resizable images.
Sometimes, you want to make a complex image, so you use something &lt;a href=&#34;https://inkscape.org&#34; target=&#34;_blank&#34;&gt;Inkscape&lt;/a&gt;,
but sometimes, you just want to make a simple one, so you take a deep breath and
away you go to write a SVG by hand!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My Zen</title>
      <link>https://math2001.github.io/post/my-zen/</link>
      <pubDate>Wed, 13 Sep 2017 14:18:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/my-zen/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://python.org&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt; is by far my favorite language (I even wish we
[spoke it ðŸ˜„). One thing I found funny about it, and in the same time
really good, is &lt;a href=&#34;https://python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;its zen&lt;/a&gt;; they&amp;rsquo;re
basically guidelines.&lt;/p&gt;

&lt;p&gt;So, today, &lt;em&gt;dans un Ã©lan d&amp;rsquo;inspiration&lt;/em&gt;, I decided to write my own.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>My new blog</title>
      <link>https://math2001.github.io/post/my-new-blog/</link>
      <pubDate>Sat, 09 Sep 2017 19:43:23 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/my-new-blog/</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;My name&amp;rsquo;s Mathieu Paturel - &lt;code&gt;@math2001&lt;/code&gt; - and I love coding. I&amp;rsquo;m French (from
Provence, if you know where that is), but my family and I moved 2 years ago to
Australia so that we could learn to speak fluently English (without this
disgusting accent ðŸ˜„).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Great resources for VIM users</title>
      <link>https://math2001.github.io/post/great-resources-for-vim-users/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/great-resources-for-vim-users/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re a VIM user, have a look at these resources, they&amp;rsquo;re pretty good (you
probably will know some, if not all of them)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The confirm option</title>
      <link>https://math2001.github.io/post/confirm-option-vim/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/confirm-option-vim/</guid>
      <description>&lt;p&gt;This is probably one of my favorite option in VIM. Just add this to your &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;set confirm&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Change shell used to run external command</title>
      <link>https://math2001.github.io/post/change-shell-run-external-command-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/change-shell-run-external-command-vim/</guid>
      <description>&lt;p&gt;On windows, the cmd sucks. But if you have sh installed from git-for-windows
for example, you can tell vim to run external commands &lt;code&gt;:!&lt;/code&gt; using this &lt;code&gt;sh&lt;/code&gt;!.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Current buffer only mapping</title>
      <link>https://math2001.github.io/post/current-buffer-only-mapping-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/current-buffer-only-mapping-vim/</guid>
      <description>&lt;p&gt;If you want to set a mapping only for the current buffer in VIM, it&amp;rsquo;s super
simple: just use the &lt;code&gt;buffer&lt;/code&gt; special argument.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DynamicOpen function</title>
      <link>https://math2001.github.io/post/dynamicopen-function-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/dynamicopen-function-vim/</guid>
      <description>&lt;p&gt;I really open my &lt;code&gt;.vimrc&lt;/code&gt; often. Too often to have to type &lt;code&gt;:e ~/.vimrc&lt;/code&gt; or
&lt;code&gt;:tabe ~/.vimrc&lt;/code&gt; every time. Here&amp;rsquo;s little function that will open a file in a
new tab if there isn&amp;rsquo;t enough room for a new split, and, you guessed it, in a
new &lt;em&gt;vertical&lt;/em&gt; split if there is.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rerun last command with bang</title>
      <link>https://math2001.github.io/post/rerun-last-command-bang-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/rerun-last-command-bang-vim/</guid>
      <description>&lt;p&gt;Put this code in your vimrc to re run the previous command but with the bang
(&lt;code&gt;!&lt;/code&gt;) by just typing &lt;code&gt;:Please&lt;/code&gt;. &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Silent command-line mapping</title>
      <link>https://math2001.github.io/post/silent-command-line-mapping/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/silent-command-line-mapping/</guid>
      <description>&lt;p&gt;If you want to set a mapping to run something that is echoed into the command
line (something starting with &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt; for example) to &lt;em&gt;not&lt;/em&gt; be displayed, you
can use the special argument &lt;code&gt;silent&lt;/code&gt;. &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;readonly&#39; != &#39;modifiable&#39;</title>
      <link>https://math2001.github.io/post/difference-vim-options-readonly-modifiable/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/difference-vim-options-readonly-modifiable/</guid>
      <description>&lt;p&gt;Do you know the difference between the option &lt;code&gt;readonly&lt;/code&gt; and &lt;code&gt;nomodifiable&lt;/code&gt; in
vim?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How do I get the ASCII value of a character?</title>
      <link>https://math2001.github.io/post/get-ascii-value-character-vim/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/get-ascii-value-character-vim/</guid>
      <description>To get the ASCII value of the character under the cursor, just press ga (or run :ascii).
It&amp;rsquo;ll print it in three format: in decimal, hexadecimal and octal.
So, when your cursor is on an arrow and that you press ga: â†’, you&amp;rsquo;ll see at the bottom:
&amp;lt;â†’&amp;gt; 8594, Hex: 2192, Octal: 20622  Mnemonic: Get ASCII value. Â­ from :help :ascii
 </description>
    </item>
    
    <item>
      <title>Variable scopes in vim</title>
      <link>https://math2001.github.io/post/variable-scopes-vim/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/variable-scopes-vim/</guid>
      <description>&lt;p&gt;An interesting feature of vim script is variable scoping. Here&amp;rsquo;s a copy-paste
from the documentation, just in case you never saw it before.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim digraphs</title>
      <link>https://math2001.github.io/post/vim-digraphs/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-digraphs/</guid>
      <description>&lt;p&gt;Ever wanted to write fancy symbols in your code or your documentation, like the
copyright symbol for example (Â©). Do you know how much time it took me to insert
this symbol? Less than a second&amp;hellip; Do you know how much time it would have took
you? Well, depending on your internet connection, it might be about 10 seconds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim help index</title>
      <link>https://math2001.github.io/post/vim-help-index/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-help-index/</guid>
      <description>&lt;p&gt;A very strong point of vim is its documentation. There&amp;rsquo;s just so much of it!!
So, &lt;strong&gt;use it&lt;/strong&gt; &lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to insert the date in Vim?</title>
      <link>https://math2001.github.io/post/how-to-insert-the-date-in-vim/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/how-to-insert-the-date-in-vim/</guid>
      <description>&lt;p&gt;First off, I really don&amp;rsquo;t recommend you use the &lt;code&gt;strftime()&lt;/code&gt; function vim has,
since, as it says in the help message (&lt;code&gt;:help strftime&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Network throttling</title>
      <link>https://math2001.github.io/post/network-throttling/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/network-throttling/</guid>
      <description>&lt;p&gt;Ever wanted to simulate a slow connection? Well, the chrome&amp;rsquo;s DevTools makes it
very easy to do!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The string module in Python</title>
      <link>https://math2001.github.io/post/string-module-python/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/string-module-python/</guid>
      <description>&lt;p&gt;If you want every letter in the alphabet in python, don&amp;rsquo;t write them all out
manually.. &lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>