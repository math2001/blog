<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math2001&#39;s blog</title>
    <link>https://math2001.github.io/</link>
    <description>Recent content on Math2001&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Mathieu Paturel 2017</copyright>
    <lastBuildDate>Fri, 28 Sep 2018 15:25:33 +1000</lastBuildDate>
    
	<atom:link href="https://math2001.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim file type specific settings</title>
      <link>https://math2001.github.io/post/vim-filetype-specific-settings/</link>
      <pubDate>Fri, 28 Sep 2018 15:25:33 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-filetype-specific-settings/</guid>
      <description>If you want to run some vim script for a specific file type, don&amp;rsquo;t make an auto command. They get messy really quickly.
Just edit ~/.vim/ftplugin/&amp;lt;filetype&amp;gt;.vim.
 ftplugin stands for file type plugin
 To get the file type of the current file, just do:
:set filetype? It&amp;rsquo;ll be automatically sourced when you open a file of that specific type.
Edit matching file Most of the time, you&amp;rsquo;ll find yourself wanting to edit the ftplugin file of the current filetype.</description>
    </item>
    
    <item>
      <title>Jump to function definition in vim</title>
      <link>https://math2001.github.io/post/vim-jump-to-function-definition/</link>
      <pubDate>Fri, 28 Sep 2018 11:47:21 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-jump-to-function-definition/</guid>
      <description>One of the features I miss from Sublime Text is the Goto Anything. In vim, by default, you have :e **/bit and then tab, and it gets annoying pretty quickly. Thankfully, there&amp;rsquo;s fzf (with fzf.vim).
But although it provides a fairly long list of commands, it doesn&amp;rsquo;t allow us to jump to function definitions (which is one of the main function of the Goto Anything).
fzf for the win There&amp;rsquo;s no question, fzf as done a really good job at being easily extensible.</description>
    </item>
    
    <item>
      <title>Challenge #1: Translate back</title>
      <link>https://math2001.github.io/post/challenge-1-translate-back/</link>
      <pubDate>Fri, 25 May 2018 22:32:29 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/challenge-1-translate-back/</guid>
      <description>I&amp;rsquo;ve got a little challenge for you.
ib jb eikybfi eite hvim Can you translate this encrypted text back to its original form?
If you do, send me an email at math2001.contact@protonmail.com explaining how you found it, and I&amp;rsquo;ll add you to the glorious list of people who found the solution to my challenge (see below).
Rules I guarantee you the original message:
 contains only lower case ASCII letters (abcdefghijklmnopqrstuvwxyz) has the same spaces as in the encrypted message.</description>
    </item>
    
    <item>
      <title>So vim got slow</title>
      <link>https://math2001.github.io/post/so-vim-became-slow/</link>
      <pubDate>Mon, 21 May 2018 17:59:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/so-vim-became-slow/</guid>
      <description>You know that feeling? You press in a key, and you have to wait like 0.5 seconds to see it appear on screen. You try to run vim --clean and everything&amp;rsquo;s back to &amp;ldquo;normal&amp;rdquo;.
As you expected, it is caused by a/some plugin(s) and/or you vimrc. Have fun debugging that. You probably know the bulk force: disable every plugin, and enable them once at a time to know which one&amp;rsquo;s slow.</description>
    </item>
    
    <item>
      <title>The Last Terminal Title</title>
      <link>https://math2001.github.io/post/the-last-terminal-title/</link>
      <pubDate>Sun, 04 Feb 2018 15:07:11 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/the-last-terminal-title/</guid>
      <description>I use tmux, and in the tabs, it displays the terminal&amp;rsquo;s title, which is just done by this 2 lines in your .tmux.conf:
setw -g window-status-current-format &amp;#39; #{pane_title} &amp;#39; setw -g window-status-format &amp;#39; #{pane_title} &amp;#39; What should you display in the tabs in your opinion? For me, it&amp;rsquo;s obvious: the last command that I ran, and the location. Now, we can&amp;rsquo;t display the whole path, but just the current folder name does perfectly the job.</description>
    </item>
    
    <item>
      <title>0.9 Repeater</title>
      <link>https://math2001.github.io/post/0.9-repeater/</link>
      <pubDate>Fri, 02 Feb 2018 17:41:26 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/0.9-repeater/</guid>
      <description>Today I learned something a bit weird in mathematics, which I find quiet funny. Here it is:
 Write 0.9 repeater (0.999&amp;hellip;) in the form of a fraction
 This can be done using an equation, have a look:
n = 0.999... 10n = 9.999... 10n - n = 9 9n = 9 n = 1 So, 0.9 repeater is equal to 1. When I saw this, I thought I made a mistake somewhere, but I didn&amp;rsquo;t, and here&amp;rsquo;s how I &amp;ldquo;explain&amp;rdquo; it (to myself at least).</description>
    </item>
    
    <item>
      <title>So binary numbers are useful?</title>
      <link>https://math2001.github.io/post/so-binary-numbers-are-useful/</link>
      <pubDate>Fri, 13 Oct 2017 16:14:21 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/so-binary-numbers-are-useful/</guid>
      <description>Do you know what binary numbers are? They&amp;rsquo;re just a way of counting with just 2 numbers: 0 and 1. For example, 9 is in binary 1001.
This is the format your computer uses to do everything, at a very low level. Either there is some current, or there isn&amp;rsquo;t. And then, it interprets these numbers, and becomes what it is.
So, what the heck could be the use of binary numbers to us, simple programmers who write some code with all these different symbols, letters, and numbers?</description>
    </item>
    
    <item>
      <title>How to combine svgs</title>
      <link>https://math2001.github.io/post/combine-svgs/</link>
      <pubDate>Sun, 08 Oct 2017 17:18:21 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/combine-svgs/</guid>
      <description>&lt;p&gt;If you want your website to be fast, you should limit the number of http
requests. A great way of doing that is combining your images. If you use SVGS
for your icons and stuff like that, here&amp;rsquo;s how you can combine all your icon in
one big file, and use them in your website!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vim Line Completion</title>
      <link>https://math2001.github.io/post/vim-line-completion/</link>
      <pubDate>Wed, 27 Sep 2017 12:55:56 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-line-completion/</guid>
      <description>Do you know what kind of completion this is? Line completion. It looks for every lines that starts with the same text (it doesn&amp;rsquo;t take into consideration the indication), and completes it for you! Awesome right?
And to do that, you just need to press this while you&amp;rsquo;re in insert mode:
ctrl+x and ctrl+l</description>
    </item>
    
    <item>
      <title>Itp: insert template please</title>
      <link>https://math2001.github.io/project/itp-insert-template-please/</link>
      <pubDate>Wed, 27 Sep 2017 11:18:56 +1000</pubDate>
      
      <guid>https://math2001.github.io/project/itp-insert-template-please/</guid>
      <description>&lt;p&gt;I was getting pretty sick of typing the same &lt;code&gt;.gitignore&lt;/code&gt;, copy/pasting my
license, README and everything.&lt;/p&gt;

&lt;p&gt;So, I made a tiny template manager, called &lt;code&gt;itp&lt;/code&gt;, for &lt;em&gt;Insert Template
Please&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash&#39;s fc command</title>
      <link>https://math2001.github.io/post/bashs-fc-command/</link>
      <pubDate>Tue, 26 Sep 2017 18:03:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/bashs-fc-command/</guid>
      <description>&lt;p&gt;When editing long commands in your terminal (you know, the one that wraps
ðŸ˜‰), sometimes you&amp;rsquo;d be better of using your actual editor (like vim or
Sublime). And guess what? Bash let&amp;rsquo;s you do that! ðŸŽ‰&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash&#39;s find command</title>
      <link>https://math2001.github.io/post/bashs-find-command/</link>
      <pubDate>Sun, 24 Sep 2017 07:51:15 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/bashs-find-command/</guid>
      <description>&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; command in bash is quite powerful, and knowing the basics might save
you some scripting.&lt;/p&gt;

&lt;p&gt;What does it do? It &amp;ldquo;finds&amp;rdquo; files. By default, it outputs their path relative to
where you ran &lt;code&gt;find&lt;/code&gt;. But, in addition of providing you with advanced &amp;ldquo;filters&amp;rdquo;
it actually allows you to run commands on each of those files.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying a hugo site on GitHub pages</title>
      <link>https://math2001.github.io/post/hugo-deploying-github-pages/</link>
      <pubDate>Sat, 23 Sep 2017 11:23:45 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/hugo-deploying-github-pages/</guid>
      <description>When you want to deploy a static website built with the fantastic Hugo on GitHub pages, you don&amp;rsquo;t have 100 of possibilities. A clean one, and an easy one ðŸ˜„.
The easy one is to build your website to the docs folder. It&amp;rsquo;s not super clean though since the source code is on the same branch as the built code. It doesn&amp;rsquo;t make diffing super great, gives a long output when you commit, you have to build at every single commit to keep consistent.</description>
    </item>
    
    <item>
      <title>Live Svg</title>
      <link>https://math2001.github.io/project/live-svg/</link>
      <pubDate>Fri, 22 Sep 2017 18:31:15 +1000</pubDate>
      
      <guid>https://math2001.github.io/project/live-svg/</guid>
      <description>SVGs are awesome. They allow you to make some infinitely resizable images.
Sometimes, you want to make a complex image, so you use something Inkscape, but sometimes, you just want to make a simple one, so you take a deep breath and away you go to write a SVG by hand!
So, you open your favorite text editor and your browser, splitting your screen in half.
 edit save alt+tab ctrl+r alt+tab  Picture how fun this workflow would can be when you try to learn to write path&amp;rsquo;s d attribute by hand!</description>
    </item>
    
    <item>
      <title>My Zen</title>
      <link>https://math2001.github.io/post/my-zen/</link>
      <pubDate>Wed, 13 Sep 2017 14:18:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/my-zen/</guid>
      <description>Python is by far my favorite language (I even wish we spoke it ðŸ˜„).
One thing I found funny about it, and in the same time really good, is its zen.
They&amp;rsquo;re basically guidelines.
So, today, dans un Ã©lan d&amp;rsquo;inspiration, I decided to write my own. Here it is:
Keep it simple. Lazyness is a quality. Learn to use your tools efficiently. Get inspired by great things. Do one thing, and do it well.</description>
    </item>
    
    <item>
      <title>My new blog</title>
      <link>https://math2001.github.io/post/my-new-blog/</link>
      <pubDate>Sat, 09 Sep 2017 19:43:23 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/my-new-blog/</guid>
      <description>Hello everyone!
My name&amp;rsquo;s Mathieu Paturel - @math2001 - and I love coding.
I&amp;rsquo;m French (from Provence, if you know where that is), but my family and I moved 2 years ago to Australia so that we could learn to speak fluently English (without this disgusting accent ðŸ˜„).
How did I discovered coding It all started with the basic &amp;ldquo;programming language&amp;rdquo; (notice the quotes ðŸ˜„). My farther taught me the very basic of programming (and it was pretty much all you could do with this language I&amp;rsquo;d ðŸ˜†).</description>
    </item>
    
    <item>
      <title>Great resources for VIM users</title>
      <link>https://math2001.github.io/post/great-resources-for-vim-users/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/great-resources-for-vim-users/</guid>
      <description>If you&amp;rsquo;re a VIM user, have a look at these resources, they&amp;rsquo;re pretty good (you probably will know some Â­ if not all Â­ of them)
 vimcast.org Just awesome screencasts and tips in general vimcolors.com A list of color schemes vimawesome.com A website listing vim plugin vi.stackexchange.com The stack exchange website for VIM  </description>
    </item>
    
    <item>
      <title>The confirm option</title>
      <link>https://math2001.github.io/post/confirm-option-vim/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/confirm-option-vim/</guid>
      <description>This is probably one of my favorite option in VIM. Just add this to your .vimrc:
set confirm This will affect different command in VIM: instead of just failing (and telling you to use force if you want to overwrite), it&amp;rsquo;ll show a confirm &amp;ldquo;popup&amp;rdquo; at the bottom and you&amp;rsquo;ll be good to do.
Quick example When you want to quit a file that isn&amp;rsquo;t saved, here&amp;rsquo;s what you get:</description>
    </item>
    
    <item>
      <title>Change shell used to run external command</title>
      <link>https://math2001.github.io/post/change-shell-run-external-command-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/change-shell-run-external-command-vim/</guid>
      <description>On windows, the cmd sucks. But if you have sh installed from git-for-windows for example, you can tell vim to run external commands :!.
Add this to your .vimrc
set shell=shset shellcmdflag=-c Now, vim won&amp;rsquo;t run external commands like this
cmd /c &amp;#34;your command&amp;#34; But like this:
sh -c &amp;#34;your command&amp;#34; So, you can now run Unix commands from VIM.
To learn more: :help &#39;shell&#39;</description>
    </item>
    
    <item>
      <title>Current buffer only mapping</title>
      <link>https://math2001.github.io/post/current-buffer-only-mapping-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/current-buffer-only-mapping-vim/</guid>
      <description>If you want to set a mapping only for the current buffer in VIM, it&amp;rsquo;s super simple: just use the buffer special argument, like so for example:
nnoremap &amp;lt;buffer&amp;gt; ,tip call InsertTipYamlFrontMatter() Learn more: :help :map-local</description>
    </item>
    
    <item>
      <title>DynamicOpen function</title>
      <link>https://math2001.github.io/post/dynamicopen-function-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/dynamicopen-function-vim/</guid>
      <description>I really open my .vimrc often. Too often to have to type :e ~/.vimrc or :tabe ~/.vimrcevery time.
Here&amp;rsquo;s a little function that will open a file in a new tab if there isn&amp;rsquo;t enough room for a new split, and, you guessed it, in a new vertical split if there is.
function! DynamicOpen(file) if winwidth(win_getid()) &amp;gt; 160 execute&amp;#34;vsplit &amp;#34;.a:file else execute&amp;#34;tabe &amp;#34;.a:file endifendfunctionnnoremap &amp;lt;leader&amp;gt;ev :call DynamicOpen($MYVIMRC)&amp;lt;CR&amp;gt; It just checks with width of the current window.</description>
    </item>
    
    <item>
      <title>Rerun last command with bang</title>
      <link>https://math2001.github.io/post/rerun-last-command-bang-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/rerun-last-command-bang-vim/</guid>
      <description>Put this little vim script in your .vimrc to rerun the previous command with the bang (!) by just typing :Please.
function! BangLastCommand()&amp;#34; The last command that was run is stored in the register `:` (:registers) let lastcommand = split(@:, &amp;#39; &amp;#39;) let command = lastcommand[0] . &amp;#39;! &amp;#39; . join(lastcommand[1:], &amp;#39; &amp;#39;) execute command endfunctioncommand! Please call BangLastCommand() So, now, if you do:
:e ~/.vimrc And you get an error because the current file has to be save, something like:</description>
    </item>
    
    <item>
      <title>Silent command-line mapping</title>
      <link>https://math2001.github.io/post/silent-command-line-mapping/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/silent-command-line-mapping/</guid>
      <description>If you want to set a mapping to run something that is echoed into the command line (something starting with : or / for example) to not be displayed, you can use the special argument silent, like so for example:
map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;r :MyCommand By the way, you should (almost) always use noremap.
Learn more: :help :map-silent</description>
    </item>
    
    <item>
      <title>&#39;readonly&#39; != &#39;modifiable&#39;</title>
      <link>https://math2001.github.io/post/difference-vim-options-readonly-modifiable/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/difference-vim-options-readonly-modifiable/</guid>
      <description>Do you know the difference between those 2 options
set readonlyset nomodifiable All the readonly does, when enabled, is it prevents you from writing the file (you can bypass it by doing :w! though), while modifiable, when disabled prevents you from actually editing the buffer.</description>
    </item>
    
    <item>
      <title>How do I get the ASCII value of a character?</title>
      <link>https://math2001.github.io/post/get-ascii-value-character-vim/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/get-ascii-value-character-vim/</guid>
      <description>To get the ASCII value of the character under the cursor, just press ga (or run :ascii).
It&amp;rsquo;ll print it in three format: in decimal, hexadecimal and octal.
So, when your cursor is on an arrow and that you press ga: â†’, you&amp;rsquo;ll see at the bottom:
&amp;lt;â†’&amp;gt; 8594, Hex: 2192, Octal: 20622  Mnemonic: Get ASCII value. Â­ from :help :ascii
 </description>
    </item>
    
    <item>
      <title>Variable scopes in vim</title>
      <link>https://math2001.github.io/post/variable-scopes-vim/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/variable-scopes-vim/</guid>
      <description>An interesting feature of vim script is variable scoping. Here&amp;rsquo;s a copy-paste from the documentation, just in case you never saw it before:
There are several name spaces for variables. Which one is to be used is specified by what is prepended: (nothing) In a function: local to a function; otherwise: global buffer-variable b: Local to the current buffer. window-variable w: Local to the current window. tabpage-variable t: Local to the current tab page.</description>
    </item>
    
    <item>
      <title>Vim digraphs</title>
      <link>https://math2001.github.io/post/vim-digraphs/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-digraphs/</guid>
      <description>This is a pretty good thing if you use symbols that aren&amp;rsquo;t on your keyboard, like the copyright symbol for example (Â©).
Do you know how much time it took me to insert this symbol? Less than a second&amp;hellip; Do you know how much time it would have took you? Well, depending on your internet connection, it might be about 10 seconds.
So, how did I do that? I just pressed ctr+k+Co (in insert mode).</description>
    </item>
    
    <item>
      <title>Vim help index</title>
      <link>https://math2001.github.io/post/vim-help-index/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-help-index/</guid>
      <description>A very strong point of vim is its documentation. There&amp;rsquo;s just so much of it!!
So, use it
It doesn&amp;rsquo;t matter if you&amp;rsquo;re an experienced user of vim or a complete beginner, there&amp;rsquo;ll be something in there for you to learn for sure.
Where could you start? Well, at the index of course! Just type :help and hit enter and scroll down a bit.
See that? You got a few kind of &amp;ldquo;tutorials&amp;rdquo; (I especially like the one Clever tricks).</description>
    </item>
    
    <item>
      <title>How to insert the date in Vim?</title>
      <link>https://math2001.github.io/post/how-to-insert-the-date-in-vim/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/how-to-insert-the-date-in-vim/</guid>
      <description>First off, I really don&amp;rsquo;t recommend you use the strftime() function vim has, since, as it says in the help message (:help strftime)
 The accepted {format} depends on your system, thus this is not portable!
 So, a somewhat better solution is to use the date shell command. Yes, it seems even less portable, but at least you know for sure if it&amp;rsquo;s going to work or not (with strftime(), I don&amp;rsquo;t know if vim could get mixed up about the OS when you use a simulate a Unix environment in your terminal)</description>
    </item>
    
    <item>
      <title>Network throttling</title>
      <link>https://math2001.github.io/post/network-throttling/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/network-throttling/</guid>
      <description>Ever wanted to simulate a slow connection? Well, the chrome&amp;rsquo;s DevTools makes it very easy to do!
Open it up (ctrl+shift+i), in the Network tab, find the No throttling dropdown menu, and you&amp;rsquo;re good to go</description>
    </item>
    
    <item>
      <title>The string module in Python</title>
      <link>https://math2001.github.io/post/string-module-python/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/string-module-python/</guid>
      <description>If you want the list of every letter, just do:
&amp;gt;&amp;gt;&amp;gt; import string &amp;gt;&amp;gt;&amp;gt; print(string.ascii_uppercase) ABCDEFGHIJKLMNOPQRSTUVWXYZ</description>
    </item>
    
  </channel>
</rss>