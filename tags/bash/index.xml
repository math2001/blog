<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Math2001&#39;s blog</title>
    <link>https://math2001.github.io/tags/bash/</link>
    <description>Recent content in Bash on Math2001&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Mathieu Paturel 2017</copyright>
    <lastBuildDate>Sun, 04 Feb 2018 15:07:11 +1100</lastBuildDate>
    
	<atom:link href="https://math2001.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Last Terminal Title</title>
      <link>https://math2001.github.io/post/the-last-terminal-title/</link>
      <pubDate>Sun, 04 Feb 2018 15:07:11 +1100</pubDate>
      
      <guid>https://math2001.github.io/post/the-last-terminal-title/</guid>
      <description>I use tmux, and in the tabs, it displays the terminal&amp;rsquo;s title, which is just done by this 2 lines in your .tmux.conf:
setw -g window-status-current-format &#39; #{pane_title} &#39; setw -g window-status-format &#39; #{pane_title} &#39;  What should you display in the tabs in your opinion? For me, it&amp;rsquo;s obvious: the last command that I ran, and the location. Now, we can&amp;rsquo;t display the whole path, but just the current folder name does perfectly the job.</description>
    </item>
    
    <item>
      <title>Bash&#39;s fc command</title>
      <link>https://math2001.github.io/post/bashs-fc-command/</link>
      <pubDate>Tue, 26 Sep 2017 18:03:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/bashs-fc-command/</guid>
      <description>&lt;p&gt;When editing long commands in your terminal (you know, the one that wraps
ðŸ˜‰), sometimes you&amp;rsquo;d be better of using your actual editor (like vim or
Sublime). And guess what? Bash let&amp;rsquo;s you do that! ðŸŽ‰&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bash&#39;s find command</title>
      <link>https://math2001.github.io/post/bashs-find-command/</link>
      <pubDate>Sun, 24 Sep 2017 07:51:15 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/bashs-find-command/</guid>
      <description>&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; command in bash is quite powerful, and knowing the basics might save
you some scripting.&lt;/p&gt;

&lt;p&gt;What does it do? It &amp;ldquo;finds&amp;rdquo; files. By default, it outputs their path relative to
where you ran &lt;code&gt;find&lt;/code&gt;. But, in addition of providing you with advanced &amp;ldquo;filters&amp;rdquo;
it actually allows you to run commands on each of those files.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying a hugo site on GitHub pages</title>
      <link>https://math2001.github.io/post/hugo-deploying-github-pages/</link>
      <pubDate>Sat, 23 Sep 2017 11:23:45 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/hugo-deploying-github-pages/</guid>
      <description>When you want to deploy a static website built with the fantastic Hugo on GitHub pages, you don&amp;rsquo;t have 100 of possibilities. A clean one, and an easy one ðŸ˜„.
The easy one is to build your website to the docs folder. It&amp;rsquo;s not super clean though since the source code is on the same branch as the built code. It doesn&amp;rsquo;t make diffing super great, gives a long output when you commit, you have to build at every single commit to keep consistent.</description>
    </item>
    
    <item>
      <title>Change shell used to run external command</title>
      <link>https://math2001.github.io/post/change-shell-run-external-command-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/change-shell-run-external-command-vim/</guid>
      <description>On windows, the cmd sucks. But if you have sh installed from git-for-windows for example, you can tell vim to run external commands :!.
Add this to your .vimrc
set shell=sh set shellcmdflag=-c  Now, vim won&amp;rsquo;t run external commands like this
cmd /c &amp;quot;your command&amp;quot;  But like this:
sh -c &amp;quot;your command&amp;quot;  So, you can now run Unix commands from VIM.
To learn more: :help &#39;shell&#39;</description>
    </item>
    
  </channel>
</rss>