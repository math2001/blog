<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vim on Math2001&#39;s blog</title>
    <link>https://math2001.github.io/tags/vim/</link>
    <description>Recent content in vim on Math2001&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Mathieu Paturel 2017</copyright>
    <lastBuildDate>Fri, 28 Sep 2018 15:25:33 +1000</lastBuildDate>
    
	<atom:link href="https://math2001.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim file type specific settings</title>
      <link>https://math2001.github.io/post/vim-filetype-specific-settings/</link>
      <pubDate>Fri, 28 Sep 2018 15:25:33 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-filetype-specific-settings/</guid>
      <description>If you want to run some vim script for a specific file type, don&amp;rsquo;t make an auto command. They get messy really quickly.
Just edit ~/.vim/ftplugin/&amp;lt;filetype&amp;gt;.vim.
 ftplugin stands for file type plugin
 To get the file type of the current file, just do:
:set filetype? It&amp;rsquo;ll be automatically sourced when you open a file of that specific type.
Edit matching file Most of the time, you&amp;rsquo;ll find yourself wanting to edit the ftplugin file of the current filetype.</description>
    </item>
    
    <item>
      <title>Jump to function definition in vim</title>
      <link>https://math2001.github.io/post/vim-jump-to-function-definition/</link>
      <pubDate>Fri, 28 Sep 2018 11:47:21 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-jump-to-function-definition/</guid>
      <description>One of the features I miss from Sublime Text is the Goto Anything. In vim, by default, you have :e **/bit and then tab, and it gets annoying pretty quickly. Thankfully, there&amp;rsquo;s fzf (with fzf.vim).
But although it provides a fairly long list of commands, it doesn&amp;rsquo;t allow us to jump to function definitions (which is one of the main function of the Goto Anything).
fzf for the win There&amp;rsquo;s no question, fzf as done a really good job at being easily extensible.</description>
    </item>
    
    <item>
      <title>So vim got slow</title>
      <link>https://math2001.github.io/post/so-vim-became-slow/</link>
      <pubDate>Mon, 21 May 2018 17:59:22 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/so-vim-became-slow/</guid>
      <description>You know that feeling? You press in a key, and you have to wait like 0.5 seconds to see it appear on screen. You try to run vim --clean and everything&amp;rsquo;s back to &amp;ldquo;normal&amp;rdquo;.
As you expected, it is caused by a/some plugin(s) and/or you vimrc. Have fun debugging that. You probably know the bulk force: disable every plugin, and enable them once at a time to know which one&amp;rsquo;s slow.</description>
    </item>
    
    <item>
      <title>Vim Line Completion</title>
      <link>https://math2001.github.io/post/vim-line-completion/</link>
      <pubDate>Wed, 27 Sep 2017 12:55:56 +1000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-line-completion/</guid>
      <description>Do you know what kind of completion this is? Line completion. It looks for every lines that starts with the same text (it doesn&amp;rsquo;t take into consideration the indication), and completes it for you! Awesome right?
And to do that, you just need to press this while you&amp;rsquo;re in insert mode:
ctrl+x and ctrl+l</description>
    </item>
    
    <item>
      <title>Great resources for VIM users</title>
      <link>https://math2001.github.io/post/great-resources-for-vim-users/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/great-resources-for-vim-users/</guid>
      <description>If you&amp;rsquo;re a VIM user, have a look at these resources, they&amp;rsquo;re pretty good (you probably will know some ­ if not all ­ of them)
 vimcast.org Just awesome screencasts and tips in general vimcolors.com A list of color schemes vimawesome.com A website listing vim plugin vi.stackexchange.com The stack exchange website for VIM  </description>
    </item>
    
    <item>
      <title>The confirm option</title>
      <link>https://math2001.github.io/post/confirm-option-vim/</link>
      <pubDate>Sun, 03 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/confirm-option-vim/</guid>
      <description>This is probably one of my favorite option in VIM. Just add this to your .vimrc:
set confirm This will affect different command in VIM: instead of just failing (and telling you to use force if you want to overwrite), it&amp;rsquo;ll show a confirm &amp;ldquo;popup&amp;rdquo; at the bottom and you&amp;rsquo;ll be good to do.
Quick example When you want to quit a file that isn&amp;rsquo;t saved, here&amp;rsquo;s what you get:</description>
    </item>
    
    <item>
      <title>Change shell used to run external command</title>
      <link>https://math2001.github.io/post/change-shell-run-external-command-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/change-shell-run-external-command-vim/</guid>
      <description>On windows, the cmd sucks. But if you have sh installed from git-for-windows for example, you can tell vim to run external commands :!.
Add this to your .vimrc
set shell=shset shellcmdflag=-c Now, vim won&amp;rsquo;t run external commands like this
cmd /c &amp;#34;your command&amp;#34; But like this:
sh -c &amp;#34;your command&amp;#34; So, you can now run Unix commands from VIM.
To learn more: :help &#39;shell&#39;</description>
    </item>
    
    <item>
      <title>Current buffer only mapping</title>
      <link>https://math2001.github.io/post/current-buffer-only-mapping-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/current-buffer-only-mapping-vim/</guid>
      <description>If you want to set a mapping only for the current buffer in VIM, it&amp;rsquo;s super simple: just use the buffer special argument, like so for example:
nnoremap &amp;lt;buffer&amp;gt; ,tip call InsertTipYamlFrontMatter() Learn more: :help :map-local</description>
    </item>
    
    <item>
      <title>DynamicOpen function</title>
      <link>https://math2001.github.io/post/dynamicopen-function-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/dynamicopen-function-vim/</guid>
      <description>I really open my .vimrc often. Too often to have to type :e ~/.vimrc or :tabe ~/.vimrcevery time.
Here&amp;rsquo;s a little function that will open a file in a new tab if there isn&amp;rsquo;t enough room for a new split, and, you guessed it, in a new vertical split if there is.
function! DynamicOpen(file) if winwidth(win_getid()) &amp;gt; 160 execute&amp;#34;vsplit &amp;#34;.a:file else execute&amp;#34;tabe &amp;#34;.a:file endifendfunctionnnoremap &amp;lt;leader&amp;gt;ev :call DynamicOpen($MYVIMRC)&amp;lt;CR&amp;gt; It just checks with width of the current window.</description>
    </item>
    
    <item>
      <title>Rerun last command with bang</title>
      <link>https://math2001.github.io/post/rerun-last-command-bang-vim/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/rerun-last-command-bang-vim/</guid>
      <description>Put this little vim script in your .vimrc to rerun the previous command with the bang (!) by just typing :Please.
function! BangLastCommand()&amp;#34; The last command that was run is stored in the register `:` (:registers) let lastcommand = split(@:, &amp;#39; &amp;#39;) let command = lastcommand[0] . &amp;#39;! &amp;#39; . join(lastcommand[1:], &amp;#39; &amp;#39;) execute command endfunctioncommand! Please call BangLastCommand() So, now, if you do:
:e ~/.vimrc And you get an error because the current file has to be save, something like:</description>
    </item>
    
    <item>
      <title>Silent command-line mapping</title>
      <link>https://math2001.github.io/post/silent-command-line-mapping/</link>
      <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/silent-command-line-mapping/</guid>
      <description>If you want to set a mapping to run something that is echoed into the command line (something starting with : or / for example) to not be displayed, you can use the special argument silent, like so for example:
map &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;r :MyCommand By the way, you should (almost) always use noremap.
Learn more: :help :map-silent</description>
    </item>
    
    <item>
      <title>&#39;readonly&#39; != &#39;modifiable&#39;</title>
      <link>https://math2001.github.io/post/difference-vim-options-readonly-modifiable/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/difference-vim-options-readonly-modifiable/</guid>
      <description>Do you know the difference between those 2 options
set readonlyset nomodifiable All the readonly does, when enabled, is it prevents you from writing the file (you can bypass it by doing :w! though), while modifiable, when disabled prevents you from actually editing the buffer.</description>
    </item>
    
    <item>
      <title>How do I get the ASCII value of a character?</title>
      <link>https://math2001.github.io/post/get-ascii-value-character-vim/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/get-ascii-value-character-vim/</guid>
      <description>To get the ASCII value of the character under the cursor, just press ga (or run :ascii).
It&amp;rsquo;ll print it in three format: in decimal, hexadecimal and octal.
So, when your cursor is on an arrow and that you press ga: →, you&amp;rsquo;ll see at the bottom:
&amp;lt;→&amp;gt; 8594, Hex: 2192, Octal: 20622  Mnemonic: Get ASCII value. ­ from :help :ascii
 </description>
    </item>
    
    <item>
      <title>Variable scopes in vim</title>
      <link>https://math2001.github.io/post/variable-scopes-vim/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/variable-scopes-vim/</guid>
      <description>An interesting feature of vim script is variable scoping. Here&amp;rsquo;s a copy-paste from the documentation, just in case you never saw it before:
There are several name spaces for variables. Which one is to be used is specified by what is prepended: (nothing) In a function: local to a function; otherwise: global buffer-variable b: Local to the current buffer. window-variable w: Local to the current window. tabpage-variable t: Local to the current tab page.</description>
    </item>
    
    <item>
      <title>Vim digraphs</title>
      <link>https://math2001.github.io/post/vim-digraphs/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-digraphs/</guid>
      <description>This is a pretty good thing if you use symbols that aren&amp;rsquo;t on your keyboard, like the copyright symbol for example (©).
Do you know how much time it took me to insert this symbol? Less than a second&amp;hellip; Do you know how much time it would have took you? Well, depending on your internet connection, it might be about 10 seconds.
So, how did I do that? I just pressed ctr+k+Co (in insert mode).</description>
    </item>
    
    <item>
      <title>Vim help index</title>
      <link>https://math2001.github.io/post/vim-help-index/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/vim-help-index/</guid>
      <description>A very strong point of vim is its documentation. There&amp;rsquo;s just so much of it!!
So, use it
It doesn&amp;rsquo;t matter if you&amp;rsquo;re an experienced user of vim or a complete beginner, there&amp;rsquo;ll be something in there for you to learn for sure.
Where could you start? Well, at the index of course! Just type :help and hit enter and scroll down a bit.
See that? You got a few kind of &amp;ldquo;tutorials&amp;rdquo; (I especially like the one Clever tricks).</description>
    </item>
    
    <item>
      <title>How to insert the date in Vim?</title>
      <link>https://math2001.github.io/post/how-to-insert-the-date-in-vim/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://math2001.github.io/post/how-to-insert-the-date-in-vim/</guid>
      <description>First off, I really don&amp;rsquo;t recommend you use the strftime() function vim has, since, as it says in the help message (:help strftime)
 The accepted {format} depends on your system, thus this is not portable!
 So, a somewhat better solution is to use the date shell command. Yes, it seems even less portable, but at least you know for sure if it&amp;rsquo;s going to work or not (with strftime(), I don&amp;rsquo;t know if vim could get mixed up about the OS when you use a simulate a Unix environment in your terminal)</description>
    </item>
    
  </channel>
</rss>